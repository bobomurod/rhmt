
регистрация аккаунтов: +endpoint, +simple release, demo release
  принимает: кол-во адресов         //количество адресов которые нужны
  возвращает: массив из адресов

эмиссия:    +endpoint, +simple release, demo release
  принимает: аккаунт
  принимает: кол-во рахматов
  возвращает:  true or false

транзакция:    +endpoint, +simple release, +demo release
  принимает: откого
  принимает: кому
  принимает: кол-во рахматов
  возвращает:  json {
    status: true or false,
    transactionID: String
  }

проверка баланса:    +endpoint, +simple release, +demo release
  принимает: адрес
  возвращает: целое число или false

простые транзакции(0.01 процент):   endpoint,  demo release

благотворительные транзакции(0.05 процент ):   endpoint, demo release

транзакция обсл.персоналу:    endpoint, demo release

контроллер конвертации поинтов в уровни:    endpoint, demo release

проверка статуса пользователя: endpoint, demo release


  
проверка условий для API то есть надо чтобы поля совподали с тем что ожидается 


при конвентации рахматов в уровни {
    вызываем функцию по переводу рахматов на архивный счет и
    вызываем функцию увеличения уровня
    }


вообще в начале нужно запускать инициализатор {
    объем эмиссии с неизменяемой величиной
    }

увидомления:
  используем Pusher-js
  посмотреть на паттерны Observer
  посмотреть на паттерны Publisher/Subscribers

задачи для фронта:
  страница держателя бонусов
  страница партнера участника
  панель с логами  другой инфой
  чат с использованием pusher chatkit
  добавить аналитику через pusher


внешний вид мобильного приложения: 
  ключевые слова для знака rahmat:
    handshake, like, 'medium clap animation'


задачи на после MVP:
  pusher отправка при изменении баланса или при проведении транзакции
  сохранение collection в блокчейне